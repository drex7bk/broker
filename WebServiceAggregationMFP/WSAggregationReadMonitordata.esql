DECLARE ns1 NAMESPACE 'http://www.ibm.com/xmlns/prod/websphere/messagebroker/6.1.0/monitoring/event';

CREATE COMPUTE MODULE WSAggregationReadMonitordata_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		DECLARE I INTEGER 1;
				
		DECLARE INREFE REFERENCE TO InputRoot.Collection.in1[1].XMLNSC.ns1:event.ns1:eventPointData.ns1:eventData; 
		DECLARE INREFM REFERENCE TO InputRoot.Collection.in1[1].XMLNSC.ns1:event.ns1:eventPointData.ns1:messageFlowData; 
		DECLARE INREFA REFERENCE TO InputRoot.Collection.in1[1].XMLNSC.ns1:event.ns1:applicationData; 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC');
		DECLARE OUTREFS REFERENCE TO OutputRoot.XMLNSC; 
		SET OUTREFS.Monitor.(XMLNSC.Field)BusinessData = INREFE.ns1:eventCorrelation.ns1:parentTransactionId; 
		FOR A AS InputRoot.Collection.in1[] DO
			MOVE INREFE TO A.XMLNSC.ns1:event.ns1:eventPointData.ns1:eventData;
			MOVE INREFM TO A.XMLNSC.ns1:event.ns1:eventPointData.ns1:messageFlowData;
			MOVE INREFA TO A.XMLNSC.ns1:event.ns1:applicationData;
			SET OUTREFS.Monitor.Flow[I].(XMLNSC.Attribute)Name = INREFM.ns1:messageFlow.ns1:name;
			SET OUTREFS.Monitor.Flow[I].(XMLNSC.Attribute)Node = INREFM.ns1:node.ns1:nodeLabel;
			SET OUTREFS.Monitor.Flow[I].(XMLNSC.Attribute)Time = INREFE.ns1:eventSequence.ns1:creationTime;
			SET I = I + 1;
				IF INREFM.ns1:node.ns1:nodeLabel = 'Send overall SOAP Reply' THEN
					FOR A AS INREFA.ns1:simpleContent[] DO
						IF A.ns1:name = 'Status' THEN
							SET OUTREFS.Monitor.BusinessData.(XMLNSC.Attribute)Status = A.ns1:value; 
						END IF;
						IF A.ns1:name = 'AMT' THEN
							SET OUTREFS.Monitor.BusinessData.(XMLNSC.Attribute)Amount = A.ns1:value; 
						END IF;
					END FOR;
				END IF;
		END FOR;

		SET OUTREFS.Monitor.Summary =  CAST ((I - 1) AS CHAR CCSID 437) 
			|| ' Monitor events processed';
		SET OutputLocalEnvironment.Destination.File.Name 
			= 	INREFE.ns1:eventCorrelation.ns1:parentTransactionId || '.xml';
		RETURN TRUE;	
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE WSAggregationReadMonitordata_Compute2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputProperties;
		SET OutputRoot.BLOB.BLOB = CAST ('Monitoring Failed' AS BLOB CCSID 437);
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE BuildConsultarDatosCobranzaResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE nsCpastc NAMESPACE 'http://www.telcel.com.mx/di/sds/m2k/cobranza/cpast/c';
		DECLARE nsRetc2c NAMESPACE 'http://www.telcel.com.mx/di/sds/m2k/activaciones/retc2/c';
		DECLARE nsReactc NAMESPACE 'http://www.telcel.com.mx/di/sds/m2k/cobranza/react/c';
		DECLARE oldNamespace NAMESPACE '';
		DECLARE existenErrores BOOLEAN FALSE;
		DECLARE existenErroresGT BOOLEAN FALSE;
		
		IF  FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL OR
			FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateRetc2cReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL OR 
			FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateReactcReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL THEN
			
			SET existenErrores = TRUE;
		END IF;
			
		IF existenErrores THEN
			SET OutputRoot.Properties = InputRoot.ComIbmAggregateReplyBody.*[>].Properties;
			SET OutputRoot.MQMD = InputRoot.ComIbmAggregateReplyBody.*[>].MQMD;
		    SET OutputRoot.MQMD.CorrelId = OutputRoot.MQMD.MsgId;
			SET OutputRoot.Properties.ReplyIdentifier = OutputRoot.MQMD.MsgId;

			SET OutputRoot.XMLNSC.soapenv:Fault.faultcode = 'NS1:Server';
			SET OutputRoot.XMLNSC.soapenv:Fault.faultstring = 'Ocurri√≥ un error al consultar los datos de cobranza del cliente.';
			SET OutputRoot.XMLNSC.soapenv:Fault.detail.nsComun:gestionTramitesWMBException.nsComun:servicio = 'GestionTramitesInfoClienteService';
			SET OutputRoot.XMLNSC.soapenv:Fault.detail.nsComun:gestionTramitesWMBException.nsComun:operacion = 'consultarDatosCobranza';

			IF FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL THEN		
				CALL M2KErrorToGTWMBException(OutputRoot.XMLNSC.soapenv:Fault.detail.nsComun:gestionTramitesWMBException,
					InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.XMLNSC.nsM2KFac:RespuestaError,
					InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.XMLNSC.nsM2KFac:RespuestaError.ESTATUS.IDPETICION,
					'm2k - Cpast (function: I*3B, action: C)',
					EX_SOL_M2K_CPASTC);
			END IF;
			
			IF FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateRetc2cReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL THEN
				CALL M2KErrorToGTWMBException(OutputRoot.XMLNSC.soapenv:Fault.detail.nsComun:gestionTramitesWMBException,
					InputRoot.ComIbmAggregateReplyBody.AggregateRetc2cReq.XMLNSC.nsM2KFac:RespuestaError,
					InputRoot.ComIbmAggregateReplyBody.AggregateRetc2cReq.XMLNSC.nsM2KFac:RespuestaError.ESTATUS.IDPETICION,
					'm2k - Retc2 (function: I*1E, action: C)',
					EX_SOL_M2K_RETC2C);
			END IF;
			
			IF FIELDTYPE(InputRoot.ComIbmAggregateReplyBody.AggregateReactcReq.XMLNSC.nsM2KFac:RespuestaError) IS NOT NULL THEN
				CALL M2KErrorToGTWMBException(OutputRoot.XMLNSC.soapenv:Fault.detail.nsComun:gestionTramitesWMBException,
					InputRoot.ComIbmAggregateReplyBody.AggregateReactcReq.XMLNSC.nsM2KFac:RespuestaError,
					InputRoot.ComIbmAggregateReplyBody.AggregateReactcReq.XMLNSC.nsM2KFac:RespuestaError.ESTATUS.IDPETICION,
					'm2k - React (function: I*I5, action: C)',
					EX_SOL_M2K_REACTC);
			END IF;
		ELSE
			DECLARE respuestaOKCpastc REFERENCE TO InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.XMLNSC.nsCpastc:RespuestaOK;
			DECLARE respuestaOKRetc2c REFERENCE TO InputRoot.ComIbmAggregateReplyBody.AggregateRetc2cReq.XMLNSC.nsRetc2c:RespuestaOK;
			DECLARE respuestaOKReactc REFERENCE TO InputRoot.ComIbmAggregateReplyBody.AggregateReactcReq.XMLNSC.nsReactc:RespuestaOK;
			
			SET OutputRoot.Properties = InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.Properties;
			SET OutputRoot.MQMD = InputRoot.ComIbmAggregateReplyBody.AggregateCpastcReq.MQMD;
		    SET OutputRoot.MQMD.CorrelId = OutputRoot.MQMD.MsgId;
			SET OutputRoot.Properties.ReplyIdentifier = OutputRoot.MQMD.MsgId;

			CREATE FIRSTCHILD OF OutputRoot.XMLNSC Domain('XMLNSC') NAME 'consultarDatosCobranzaResponse';
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC.consultarDatosCobranzaResponse Domain('XMLNSC') NAME 'response';
			CALL ChangeNamespaceInOutputRoot(OutputRoot.XMLNSC, oldNamespace, nsInfoCli);
			CALL ChangeNamespaceInOutputRoot(OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse, oldNamespace, nsInfoCli);
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:limiteCredito = '0';
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:accionCobranza = '';
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:motivoCobranza = '';
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:montoMinimoPagar = '';
			
			DECLARE accionCobranza CHARACTER '';
			DECLARE motivoCobranza CHARACTER '';
			
			IF FIELDTYPE(respuestaOKCpastc.TablaCpast.AccionTomada[1]) IS NOT NULL THEN
				SET accionCobranza = TRIM(respuestaOKCpastc.TablaCpast.AccionTomada[1]);
			END IF;
			
			IF FIELDTYPE(respuestaOKCpastc.TablaCpast.Est[1]) IS NOT NULL THEN
				SET motivoCobranza = TRIM(respuestaOKCpastc.TablaCpast.Est[1]);
			END IF;
			
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:accionCobranza = accionCobranza;
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:motivoCobranza = motivoCobranza;

			DECLARE limiteCredito CHARACTER REPLACE(TRIM(respuestaOKRetc2c.LimiteCredito), ',', '');
		
			IF limiteCredito = '' THEN
				SET limiteCredito = '0';
			END IF;
			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:limiteCredito = limiteCredito;

			SET OutputRoot.XMLNSC.nsInfoCli:consultarDatosCobranzaResponse.nsInfoCli:response.nsInfoCli:montoMinimoPagar = REPLACE(TRIM(respuestaOKReactc.SaldoActual), ',', '');
		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE AggregateFanIn_ComputeCorrelID
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		SET OutputRoot.Properties.ReplyIdentifier=InputLocalEnvironment.BLOB.BLOB;
		SET OutputRoot.MQMD.MsgId=InputLocalEnvironment.BLOB.BLOB;
		SET OutputRoot.MQMD.CorrelId=InputLocalEnvironment.BLOB.BLOB;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;